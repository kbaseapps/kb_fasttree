# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_fasttree(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_FastTree(self, params, context=None):
        """
        Method for Tree building of either DNA or PROTEIN sequences
        **
        **        input_type: MSA
        **        output_type: Tree
        :param params: instance of type "FastTree_Params" (FastTree Input
           Params) -> structure: parameter "workspace_name" of type
           "workspace_name" (** The workspace object refs are of form: ** ** 
           objects = ws.get_objects([{'ref':
           params['workspace_id']+'/'+params['obj_name']}]) ** ** "ref" means
           the entire name combining the workspace id and the object name **
           "id" is a numerical identifier of the workspace or object, and
           should just be used for workspace ** "name" is a string identifier
           of a workspace or object.  This is received from Narrative.),
           parameter "desc" of String, parameter "input_ref" of type
           "data_obj_ref", parameter "output_name" of type "data_obj_name",
           parameter "species_tree_flag" of Long, parameter "intree_ref" of
           type "data_obj_ref", parameter "fastest" of Long, parameter
           "pseudo" of Long, parameter "gtr" of Long, parameter "wag" of
           Long, parameter "noml" of Long, parameter "nome" of Long,
           parameter "cat" of Long, parameter "nocat" of Long, parameter
           "gamma" of Long
        :returns: instance of type "FastTree_Output" (FastTree Output) ->
           structure: parameter "report_name" of type "data_obj_name",
           parameter "report_ref" of type "data_obj_ref", parameter
           "output_ref" of type "data_obj_ref"
        """
        return self._client.call_method('kb_fasttree.run_FastTree',
                                        [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_fasttree.status',
                                        [], self._service_ver, context)
